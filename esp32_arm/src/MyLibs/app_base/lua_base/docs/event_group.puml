@startuml


frame lua_function{
    card lua_rx
    card lua_tx
    card lua_others
    card lua_rf
}

frame richon{
    card platform
}

lua_rx  <-- platform
frame bridge{
    card event_bridge
}

frame RTOS{
    card package_getter
    node event_setter
    card EventGroup[
    EventGroup
    ===
    master_uart_rx
    slave_uart_rx
    wifi_rx
    ]
}
platform <-[dashed]- event_bridge:  LuaWaitEvent() \nLuaResumeTask
event_bridge <-[dashed]- EventGroup

frame master_uart{
    card tx_setter
    queue rx_stream
    queue tx_buffer
    card stream_to_package
    queue rx_package

    event_setter <-[dashed]- rx_package
}

card common_api[
common api
===
DILEDON
DILEDOFF
DILEDFlash
DOLEDFlash
RFLEDFlash
RUNLEDFlash
UARTLEDFlash

---
ComputeCRC
Printf
GetTicks
Delay
ResetSystem
---
GetInputData?
UartDataProc
UARTProcess
nNormalProcess
SendToHost
SendToHostWithFlag
GetInputByteArray
GetInputByUserData
RFRecv
RFResponse
SetLamp
GetRFData
]


card UART
EventGroup <-[#red]- package_getter: auto_clear
EventGroup <-[#red]- event_setter : set bit
rx_stream <-- UART : Interupt service
lua_rx <-[dashed]- package_getter : package
package_getter <-[dashed]- rx_package
rx_package <-- stream_to_package
stream_to_package <-[dashed]- rx_stream

lua_tx --> tx_setter : LuaUartSend \nLuaUartRecv  \n
tx_setter --> tx_buffer : ??? package to stream ???
tx_buffer ---> UART

card rf
lua_rf --------> rf : RFRecv \nGetRFData \nRFProcess \n

lua_others -----> common_api

@enduml