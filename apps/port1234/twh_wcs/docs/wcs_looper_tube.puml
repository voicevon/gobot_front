@startuml

state wcs_state{
	[*] -> wcs_idle
	wcs_idle-[#red,dashed]-> checking_deposit_mq
	checking_deposit_mq -[#red,bold]-> deposit_begin: deposit(row, col, quantity) \nrobot[row].moveto(col)
	deposit_begin -[#red,bold]-> deposite_end
	deposite_end -[#red,bold]->wcs_idle: user_finished, \nuser_canceled
	checking_deposit_mq: this is a virtual state

	checking_deposit_mq --> withdraw_order_item: deposit mq is empty
	withdraw_order_item --> wcs_idle:  withdraw-queue is empty

	note right of wcs_idle
	Parallel processes:
		packer button checker
		shipper button checker
	end note
}


state order_item{
	[*] -> inside_loop_porter
	inside_loop_porter --> inside_loop_porter_moving: Pa:loop_porter.MoveTo()
	
    inside_loop_porter_moving --> loop_porter_gate: loop_porter.is_ready()
	loop_porter_gate --> loop_porter_gate_picking: porter_picker.Pick()
    loop_porter_gate_picking --> loop_porter_done: porter_picker.has_done() then \n loop_porter.set_state(idle)
	
    loop_porter_done --> tube_moving: tube.Got_entering(valve_n)
	tube_moving --> tube_outlet
	tube_outlet --> workstation
}
withdraw_order_item --> order_item: deposit mq is empty

state loop_porter {
	[*] -> loop_idle 
	loop_idle --> moving
	moving <-- moving
	moving --> ready
	
}

state tube_conveyer{
	[*] -> tube_idle 
	tube_idle -> tube_set_valves
	tube_set_valves --> tube_air_push
	tube_air_push --> tube_got_outlet

}


inside_loop_porter --> moving:  Pb: loop_porter
ready --> loop_porter_gate
loop_porter_done --> loop_idle
loop_porter_done --> tube_set_valves

tube_outlet --> tube_idle
tube_got_outlet --> tube_outlet



@enduml
